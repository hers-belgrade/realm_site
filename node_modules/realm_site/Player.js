var hersdata = require('hersdata'),
  BroadcastingChannel = hersdata.BroadcastingChannel,
  SessionUser = hersdata.SessionUser,
  PokerPlayer = require('./PokerPlayer'),
  publicrooms = require('./servers').publicrooms,
  rooms = require('./servers').rooms;

function LobbyMetaChannel(sayer){
  this.classcounts = {};
  this.publics = {};
  this.sayer = sayer;
  this.previewChannel = new BroadcastingChannel(sayer);
};
LobbyMetaChannel.prototype.describe = function(cb){
  for(var i in this.publics){
    this.publics[i].describe(cb);
  }
  cb([undefined,['preview',null]]);
  this.previewChannel.describe(cb);
};
LobbyMetaChannel.prototype.add = function(name,room){
  var cc = this.classcounts,
    ps = this.publics,
    rc = room.class;
  if(!rc){return;}
  var ch = new BroadcastingChannel(this.sayer);
  ch.switchTo(room,'public');
  if(!cc[rc]){
    cc[rc] = 1;
  }else{
    if(cc[rc]>20){
      return;
    }
    cc[rc]++;
  }
  ps[name] = ch;
  if(this.active){
    //this.sayer.say.call(this.sayer,['lobby',[name,null]]);
    ch.activate();
  }
};
LobbyMetaChannel.prototype.preview = function(name){
  var bc = rooms.bcasters[name];
  if(!bc){
    return;
  }
  this.previewChannel.switchTo(bc,'preview');
  if(this.active){
    this.previewChannel.activate();
  }
};
LobbyMetaChannel.prototype.activate = function(){
  this.active = true;
  for(var i in this.publics){
    this.publics[i].activate();
  }
  this.previewChannel.activate();
};
LobbyMetaChannel.prototype.deactivate = function(){
  this.active = false;
  for(var i in this.publics){
    this.publics[i].deactivate();
  }
  this.previewChannel.deactivate();
};

function CasinoMetaChannel(sayer){
  this.lobby = new LobbyMetaChannel(sayer);
  this.room = new BroadcastingChannel(sayer);
  this.activeChannel = this.lobby;
  this.activeChannelName='lobby';
  this.lobby.activate();
}
CasinoMetaChannel.prototype.describe = function(cb){
  this.activeChannel.describe(cb);
};
CasinoMetaChannel.prototype.rendererName = function(){
  if(this.activeChannelName==='lobby'){
    return 'lobby';
  }
  if(this.activeChannel.bcaster){
    var klass = this.activeChannel.bcaster.class;
    return klass;
  }
  return '';
};
CasinoMetaChannel.prototype.switchTo = function(name){
  if(this.activeChannelName===name){return;}
  this.activeChannel.deactivate();
  if(name==='lobby'){
    this.activeChannel = this.lobby;
  }else{
    this.activeChannel = this.room;
    var rb = rooms.bcasters[name];
    if(rb){
      this.room.switchTo(rb,'observer');
    }
  }
  this.activeChannel.activate();
  this.activeChannelName = name;
};

function Player(data,dbuser,realmname){
  this.dbuser = dbuser;
  SessionUser.call(this,data,dbuser.username,realmname,dbuser.roles);
  if (typeof(dbuser.balance) === 'undefined') {
    dbuser.balance = 2000;
    this.save();
  }
  this.engagements = {};
  this.casino = new CasinoMetaChannel(this);
  var uel = this.data.element(['local','users']);
  var mydata = uel.element([this.username]);
  if(!mydata){
    uel.commit('new_user',[
      ['set',[this.username]],
      ['set',[this.username,'balance'],[dbuser.balance,undefined,this.fullname]],
      ['set',[this.username,'avatar'],[dbuser.avatar,undefined,this.fullname]],
      ['set',[this.username,'renderer'],['lobby',undefined,this.fullname]]
    ]);
    mydata = uel.element([this.username]);
  }
  this.myChannel = new BroadcastingChannel(this);
  this.myBcaster = new hersdata.Broadcaster(mydata,function(){},this.username,this.realmname,this.roles);
  this.myBcaster.follow(['engagements']);
  this.myChannel.switchTo(this.myBcaster);
  this.myChannel.activate();
  var t = this;
  this.publicsubscriber = publicrooms.subscribe(function(name,room){
    t.casino.lobby.add(name,room);
    //console.log('PokerPlayer got',name,room.class,t.lobby);
  });
  //this.casino.activate();
}
Player.prototype = new SessionUser();
Player.prototype.constructor = Player;
Player.prototype.save = function(){
  this.dbuser.save();
};
Player.prototype.engagementElement = function(bcaster){
  bcaster = bcaster || this.casino.activeChannel.bcaster;
  if(!bcaster){return;}
  if(!bcaster.roomName){return;}
  var rn = bcaster.roomName;
  var pdata = this.myChannel.bcaster.data;
  var esel = pdata.element(['engagements']),eel;
  if(!esel){
    pdata.commit('init_engagement', [
      ['set',['engagements'],this.fullname],
      ['set',['engagements',rn]],
      ['set',['engagements',rn,'class'],[bcaster.class]]
    ]);

    eel = pdata.element(['engagements',rn]);
  }else{
    eel = esel.element([rn]);
    if(!eel){
      esel.commit('create_engagement',[
        ['set',[rn]],
        ['set',[rn,'class'],[bcaster.class]]
      ]);
      eel = esel.element([rn]);
    }
  }
  this.myBcaster.follow(['engagements',rn]);
  return eel;
};
Player.prototype.preview = function(name,cb){
  console.log(arguments);
  this.casino.lobby.preview(name);
  cb('OK');
};
Player.prototype.switchTo = function(name,cb){
  var eel = this.engagementElement();
  if(eel){
    eel.commit('inactivate_engagement',[
      ['set',['active'],[false]]
    ]);
  }
  this.casino.switchTo(name);
  eel = this.engagementElement();
  if(eel){
    eel.commit('activate_engagement',[
      ['set',['active'],[true]]
    ]);
  }
  this.myChannel.bcaster.data.commit('renderer_switch',[
    ['set', ['renderer'], ['',undefined,this.fullname]],
    ['set',['renderer'],[this.casino.rendererName(),undefined,this.fullname]]
  ]);
  cb('OK');
};
Player.prototype.destroy = function(){
  publicrooms.unsubscribe(this.publicsubscriber);
  SessionUser.prototype.destroy.call(this);
};
Player.prototype.describe = function(cb){
  this.myChannel.describe(cb);
  this.casino.describe(cb);
};
Player.prototype.follow = function(path,cb){
  typeof cb === 'function' && cb('OK');
};
Player.prototype.bidForPoker = function(seat,cb){
  var bc = this.casino.activeChannel.bcaster;
  if(!bc){
    cb('NOT_A_POKER');
    return;
  }
  var path = ['nodes',bc.serverName,'rooms',bc.roomName];
  cb('OK');
};

module.exports = Player;
